import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.util.List;
import java.util.Scanner;
import java.util.ArrayList;

public class dirParser {
    File dir; 
    String[] rawfileList; //List generated by parsing directory.
    List<List<String>> cleanfileList = new ArrayList<List<String>>(); //Sorted File list.
    List<Integer> dims = new ArrayList<>();
    int first_img;
    int last_img;

    FilenameFilter refLogFilter = new FilenameFilter() {
        public boolean accept(File f, String name)
                {
                    return name.contains("REF.dv.log");
                }
    };

    FilenameFilter logFilter = new FilenameFilter() {
        public boolean accept(File f, String name) 
                {
                    return name.contains(".dv.log") && !name.contains("REF");
                }
    };

    dirParser(String dir) {
        this.dir = new File(dir);
        rawfileList = this.dir.list(refLogFilter);
        this.first_img = findFirstImage();
        this.last_img = findLastImage();
        bigCleaner(rawfileList);
        findDims();
    }

    private void findDims() {
        String last_img = "";
        for(int i = 0; i < getcleanfileList().size(); i++) {
            String file = getcleanfileList().get(i).get(0).replace("_REF", "");
            String start = file.substring(0, file.indexOf("_"));
            if(start.equals(last_img)) continue;
            last_img = start;
            File tmp = new File(dir + "/" + file);
            try {
                try (Scanner in = new Scanner(tmp)) {
                    while(in.hasNextLine()) {
                        String line = in.nextLine().toLowerCase();
                        if (line.trim().startsWith("zwt")) {
                            if(Integer.parseInt(line.substring(line.indexOf(":") + 1, 
                            line.indexOf("x", line.indexOf(":"))).trim()) == 1) {
                                dims.add(2);
                            } else {
                                dims.add(3);
                            }
                        } 
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
    } 

    public List<Integer> getDims() {
        return dims;
    }

    public int getLastImage() {
        return last_img;
    }

    public int getFirstImage() {
        return first_img;
    }

    public String[] getrawFileList() {
        return rawfileList;
    }

    public List<List<String>> getcleanfileList() {
        return cleanfileList;
    }

    /**
     * Returns number of last image in set. Could easily be 
     * rewritten and improved. Currently very specific to our
     * generated delta vision file names.
     * @return the max value of image incrementor
     */
    private int findLastImage() {
        int max = 0;
        for(int i = 0; i < rawfileList.length; i++) {
            String currimage = rawfileList[i];
            int num = Integer.parseInt(currimage.substring(currimage.indexOf("e") + 1, currimage.indexOf("_")));
            if (num > max) max = num;
        }
        return max;
    }

    private int findFirstImage() {
        int min = 1000;
        for(int i = 0; i < rawfileList.length; i++) {
            String currimage = rawfileList[i];
            int num = Integer.parseInt(currimage.substring(currimage.indexOf("e") + 1, currimage.indexOf("_")));
            if (num < min) min = num;
        }
        return min;
    }

    /**
     * Takes rawImageList generated in constructor and sorts into a 2D array,
     * with rows sorted by image #. Checker is specific to our delta vision
     * file names, but can be easily altered.
     * @param files raw file list.
     */
    public void bigCleaner(String[] files) {
        int last = getLastImage();
        for(int i = 0; i < last; i++) {
            String checker = "image" + (i+1) + "_";
            List<String> tmp = new ArrayList<String>();
            for(int k = 0; k < files.length; k++) {
                if (files[k].startsWith(checker)) {
                    tmp.add(files[k]);
                }
            }
            cleanfileList.add(tmp);
        }
    }

    public static void main(String[] args) {
        dirParser dp = new dirParser("Y:/Jessica/Live_Bacterial_Imaging/20220328_CL2122worms");
        System.out.println(dp.getDims());

    }
}
